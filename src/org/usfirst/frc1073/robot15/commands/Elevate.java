// RobotBuilder Version: 1.5
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package org.usfirst.frc1073.robot15.commands;

import edu.wpi.first.wpilibj.AnalogInput;
import edu.wpi.first.wpilibj.DigitalInput;
import edu.wpi.first.wpilibj.command.Command;

import org.usfirst.frc1073.robot15.Robot;
import org.usfirst.frc1073.robot15.RobotMap;

/**
 *
 */
public class  Elevate extends Command {
	private int totesHeld = 0;
	private int recentlyPressed = 0;
	private boolean newRound = true;
    DigitalInput limitSwitch = RobotMap.elevatorlimitSwitch;
    AnalogInput iRSensor = RobotMap.elevatorIRSensor;
    
    public Elevate() {
        // Use requires() here to declare subsystem dependencies
        // eg. requires(chassis);

        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
        requires(Robot.elevator);

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
    }

    // Called just before this Command runs the first time
    protected void initialize() {
    }

    // Called repeatedly when this Command is scheduled to run
    protected void execute() {
    	if(iRSensor.getValue() < 20 && newRound){
    		totesHeld = 1;
    		newRound = false;
    	}
    	// recentlyPressed may change depending on how often limit switch is polled as to not count
    	// a raised tote multiple times in a single level change
    	if(recentlyPressed > 50){
    		if(limitSwitch.get()){
    			totesHeld++;
    			recentlyPressed = 0;
    		}
    	}
    	else{
    		recentlyPressed++;
    	}
    	
    	
    }

    // Make this return true when this Command no longer needs to run execute()
    protected boolean isFinished() {
        return false;
    }

    // Called once after isFinished returns true
    protected void end() {
    }

    // Called when another command which requires one or more of the same
    // subsystems is scheduled to run
    protected void interrupted() {
    }
    
    public void newCollectionRound(){
    	newRound = true;
    }
}
