// RobotBuilder Version: 1.5
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package org.usfirst.frc1073.robot15;

//import edu.wpi.first.wpilibj.CameraServer;
import edu.wpi.first.wpilibj.IterativeRobot;
import edu.wpi.first.wpilibj.Preferences;
import edu.wpi.first.wpilibj.command.Command;
import edu.wpi.first.wpilibj.command.Scheduler;
import edu.wpi.first.wpilibj.livewindow.LiveWindow;
import edu.wpi.first.wpilibj.smartdashboard.SendableChooser;
import edu.wpi.first.wpilibj.smartdashboard.SmartDashboard;

import org.usfirst.frc1073.robot15.commands.*;
import org.usfirst.frc1073.robot15.subsystems.*;

/**
 * The VM is configured to automatically run this class, and to call the
 * functions corresponding to each mode, as described in the IterativeRobot
 * documentation. If you change the name of this class or the package after
 * creating this project, you must also update the manifest file in the resource
 * directory.
 */
public class Robot extends IterativeRobot {

    public static OI oi;
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    public static DriveTrain driveTrain;
    public static RangeFinder rangeFinder;
    public static CollectorWheels collectorWheels;
    public static Elevator elevator;
    public static BinCollector binCollector;
    public static Dashboard dashboard;
    public static CollectorWrists collectorWrists;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    
    public static SendableChooser chooser;
    
    public static Preferences prefs;
    public static double toteCollectTime;
    public static double driveToAutoTime;
    public static float driveToAutoSpeed;
    public static double driveToBinTime;
    public static float driveToBinSpeed;
    public static double elevateToteTime;
    public static double rollersEjectTime;
    public static double timeToGroundLevel;
    public static double turnToAutoTime;
    public static float turnToAutoSpeed;
    public static double binLiftTime;

  //  CameraServer server;
    Command autonomousCommand;
    
    /**
     * This function is run when the robot is first started up and should be
     * used for any initialization code.
     */
    public void robotInit() {
    RobotMap.init();
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
        driveTrain = new DriveTrain();
        rangeFinder = new RangeFinder();
        collectorWheels = new CollectorWheels();
        elevator = new Elevator();
        binCollector = new BinCollector();
        dashboard = new Dashboard();
        collectorWrists = new CollectorWrists();

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
        // OI must be constructed after subsystems. If the OI creates Commands 
        //(which it very likely will), subsystems are not guaranteed to be 
        // constructed yet. Thus, their requires() statements may grab null 
        // pointers. Bad news. Don't move it.
        oi = new OI();

        // instantiate the command used for the autonomous period
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=AUTONOMOUS
        autonomousCommand = new AutonomousDefault();

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=AUTONOMOUS
        
       //choose autonomous
       chooser = new SendableChooser();
       chooser.addDefault("Autonomous Default", new AutonomousDefault());
       chooser.addObject("Autonomous Bin Start", new AutonomousBin());
       chooser.addObject("Autonomous Double", new DoubleAuto());
       chooser.addObject("Tripple Stack", new TrippleAuto());
       SmartDashboard.putData("Autonomous choice: ", chooser);
       
       prefs = Preferences.getInstance();
        
       // Camera code
       /*
       server = CameraServer.getInstance();
       server.setQuality(50);
       server.startAutomaticCapture("cam0");
    	*/
    }

    /**
     * This function is called when the disabled button is hit.
     * You can use it to reset subsystems before shutting down.
     */
    public void disabledInit(){

    }

    public void disabledPeriodic() {
        Scheduler.getInstance().run();
    }

    public void autonomousInit() {
    	
    	toteCollectTime = prefs.getDouble("toteTimeout", 1.0);
    	driveToAutoTime = prefs.getDouble("timeToAutozone", 4.0);
    	driveToAutoSpeed = prefs.getFloat("driveSpeedToScore", -0.8f);
    	driveToBinTime = prefs.getDouble("timeToBin", 1.0);
    	driveToBinSpeed = prefs.getFloat("driveToBinSpeed", -0.5f);
    	elevateToteTime = prefs.getDouble("timeToElevateTote", 1.0);
    	rollersEjectTime = prefs.getDouble("timeForRollersToEject", 1.0);
    	timeToGroundLevel = prefs.getDouble("timeToGroundLevel", 1.0);
    	turnToAutoTime = prefs.getDouble("timeToTurnToAutoZone", 1.0);
    	turnToAutoSpeed = prefs.getFloat("speedToTurnToAutoZone", 0.5f);
    	binLiftTime = prefs.getDouble("timeToLiftBin", 1.0);
    	prefs.save();
    	
        // schedule the autonomous command (example)
    	autonomousCommand = (Command) chooser.getSelected();
        if (autonomousCommand != null) autonomousCommand.start();
    }

    /**
     * This function is called periodically during autonomous
     */
    public void autonomousPeriodic() {
        Scheduler.getInstance().run();
        elevator.updateMag();
    }

    public void teleopInit() {
        // This makes sure that the autonomous stops running when
        // teleop starts running. If you want the autonomous to 
        // continue until interrupted by another command, remove
        // this line or comment it out.
        if (autonomousCommand != null) autonomousCommand.cancel();
    }

    /**
     * This function is called periodically during operator control
     */
    public void teleopPeriodic() {
        Scheduler.getInstance().run();
        elevator.updateMag();
        
        // This method will provide all of the information that will be needed while testing, simply uncomment it.
        // dashboard.allTestingInformation();
    }

    /**
     * This function is called periodically during test mode
     */
    public void testPeriodic() {
        LiveWindow.run();
    }
}
