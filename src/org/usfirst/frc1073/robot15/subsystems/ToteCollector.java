// RobotBuilder Version: 1.5
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package org.usfirst.frc1073.robot15.subsystems;

import org.usfirst.frc1073.robot15.RobotMap;
import org.usfirst.frc1073.robot15.commands.*;

import edu.wpi.first.wpilibj.CANTalon;
import edu.wpi.first.wpilibj.DoubleSolenoid;
import edu.wpi.first.wpilibj.command.Subsystem;
import edu.wpi.first.wpilibj.smartdashboard.SmartDashboard;


/**
 *
 */
public class ToteCollector extends Subsystem {
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    CANTalon toteCollectorLeftTalon = RobotMap.toteCollectortoteCollectorLeftTalon;
    CANTalon toteCollectorRightTalon = RobotMap.toteCollectortoteCollectorRightTalon;
    DoubleSolenoid toteCollectorDoubleSolenoid = RobotMap.toteCollectortoteCollectorDoubleSolenoid;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    
    private final double WHEEL_SPEED = 0.5; // constant to define speed... MIGHT NEED TO BE CHANGED
    
    private boolean isClosed;
    
    // Put methods for controlling this subsystem
    // here. Call these from Commands.

    public void initDefaultCommand() {
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND
	
        // Set the default command for a subsystem here.
        //setDefaultCommand(new MySpecialCommand());
    }
    
    // Method to spread to collector open
    public void open(){
    	isClosed = false;
    	toteCollectorDoubleSolenoid.set(DoubleSolenoid.Value.kForward);
    	// SmartDashboard.putBoolean("Tote Collector Collecting", isClosed); for testing
    }
    
    // Method to close the collector together
    public void close(){
    	isClosed = true;
    	toteCollectorDoubleSolenoid.set(DoubleSolenoid.Value.kReverse);
    	// SmartDashboard.putBoolean("Tote Collector Collecting", isClosed); for testing
    }
    
    // Returns the state of collector, if it is open or closed
    public boolean getState(){
    	return isClosed;
    }
    
    // Method to spin the wheels to collect a tote
    public void wheelsCollect() {
    	if (toteCollectorDoubleSolenoid.get() == DoubleSolenoid.Value.kForward) {
    		toteCollectorLeftTalon.set(WHEEL_SPEED);
        	toteCollectorRightTalon.set(-WHEEL_SPEED);
    	}
    }
    
    // Method to spin the wheels to purge a tote
    public void wheelsPurge() {
    	if (toteCollectorDoubleSolenoid.get() == DoubleSolenoid.Value.kReverse) {
    		toteCollectorLeftTalon.set(-WHEEL_SPEED);
        	toteCollectorRightTalon.set(WHEEL_SPEED);
    	}
    }
    
    // Method to turn the wheel motors off
    public void wheelsOff() {
    	toteCollectorLeftTalon.set(0);
    	toteCollectorRightTalon.set(0);
    }
}

