// RobotBuilder Version: 1.5
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package org.usfirst.frc1073.robot15.subsystems;

import org.usfirst.frc1073.robot15.Robot;
import org.usfirst.frc1073.robot15.RobotMap;
import org.usfirst.frc1073.robot15.commands.*;

import edu.wpi.first.wpilibj.*;
import edu.wpi.first.wpilibj.command.Subsystem;
import edu.wpi.first.wpilibj.smartdashboard.SmartDashboard;


/**
 *
 */
public class Elevator extends Subsystem {
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    Solenoid elevatorSecondStageSolenoid = RobotMap.elevatorelevatorSecondStageSolenoid;
    Solenoid elevatorFirstStageSolenoid = RobotMap.elevatorelevatorFirstStageSolenoid;
    DigitalInput elevatorMagBottom = RobotMap.elevatorelevatorMagBottom;
    DigitalInput elevatorMagLow = RobotMap.elevatorelevatorMagLow;
    DigitalInput elevatorMagMed = RobotMap.elevatorelevatorMagMed;
    DigitalInput elevatorMagHigh = RobotMap.elevatorelevatorMagHigh;
    AnalogInput irSensor = RobotMap.elevatorirSensor;
    DigitalInput limitSwitch = RobotMap.elevatorlimitSwitch;
    Solenoid elevatorStackHolderSolenoid = RobotMap.elevatorelevatorStackHolderSolenoid;
    CANTalon elevatorRollerTalon = RobotMap.elevatorelevatorRollerTalon;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    
    // easy to call variables for pnuematics
    private final boolean OPEN = false; 
    private final boolean CLOSE = true;
    
    private final double ROLLER_SPEED = 0.7; // Set speed of rollers. #########MIGHT NEED TO CHANGE, NOT FINAL#############
    
    private int totesHeld = 0; // The number of totes in the robot
    
    private int pistonState = 0; // State of the elevator
    /*********************
     * 
     * 0 = stopped
     * 1 = piston out
     * 2 = piston in
     * 
     *********************/
    
    private final int STOPPED = 0;
    private final int PISTON_OUT = 1;
    private final int PISTON_IN = 2;
    
    // Reordering these enums may result in death. To you, your dog, and fatal to the code
    public enum elevState { FLOOR_0, BETWEEN_0_1, FLOOR_1, BETWEEN_1_2, FLOOR_2, BETWEEN_2_3, FLOOR_3 };
    /************************************************************
     * 
     * Floor Levels:
     *  FLOOR_0 = is the bottom of the piston
     *  FLOOR_1 = is the 6" lift
     *  FLOOR_2 = is the 12" lift
     *  FLOOR_3 = the max piston out
     *  
     * Between States:
     *  All of the between states are just states which means
     *  the piston is between point x and point y.
     *  Example: BETWEEN_x_y
     * 
     ***********************************************************/
    
    public enum trigState { NOTHING, UP, DOWN, AT_0, AT_1, AT_2, AT_3 };
    /************************************************************
     * 
     * NOTHING = a state where the piston is stopped and no 
     *  other action is taken
     *  
     * UP = the state which says it is going up and does calculations
     * 
     * DOWN = the state which says it is going down and does the
     *  calculations.
     * 
     * AT_0, AT_1, AT_2, AT_3 = States that say the 
     *  elevator is at those positions.
     * 
     ***********************************************************/
    
    private elevState currentState = elevState.FLOOR_0; // The current State, this is what is the last saved current state
    private trigState currentTrigger = trigState.AT_0;  // The current trigger, this is what is current with what the piston is doing
    
    private boolean magFloor0;
    private boolean magFloor1;
    private boolean magFloor2;
    private boolean magFloor3;
    
    private boolean holdersState;
    
    // Put methods for controlling this subsystem
    // here. Call these from Commands.
    
    public void initDefaultCommand() {
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND
        setDefaultCommand(new ToteElevatorCounter());

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND
	
        // Set the default command for a subsystem here.
        //setDefaultCommand(new MySpecialCommand());
    }
    
    public boolean getHolders()
    {
    	return holdersState;
    }
    
    // Method to set the totes amount
    public void setTotesHeld(int totes) {
    	totesHeld = totes;
    }
    
    // Returns the amount of totes
    public int getTotesHeld() {
    	return totesHeld;
    }
    
    // Returns the IR Sensor value
    public int getIrVal(){
    	return irSensor.getValue();
    }
    
    // Returns the limit switch value
    public boolean isSwitchHit(){
    	return limitSwitch.get();
    }
    
    // Method to collect the rollers to role in a tote
    public void rollersCollect(){
    	elevatorRollerTalon.set(-ROLLER_SPEED);
    }
    
    // Method ejects the totes on rolers
    public void rollersPurge(){
    	elevatorRollerTalon.set(ROLLER_SPEED);
    }
    
    // Method to turn the rolers off
    public void rollersOff(){
    	elevatorRollerTalon.set(0.0);
    }
    
    // Method to pull the elevator pistons in
    public void pistonIn(){
    	elevatorFirstStageSolenoid.set(OPEN);
    	elevatorSecondStageSolenoid.set(CLOSE);
    	pistonState = PISTON_IN;
    }
    
    // Method to push the piston out
    public void pistonOut(){
    	elevatorSecondStageSolenoid.set(OPEN);
    	elevatorFirstStageSolenoid.set(CLOSE);
    	pistonState = PISTON_OUT;
    }
    
    // Method to stop the piston where it is
    public void pistonStop(){
    	elevatorFirstStageSolenoid.set(OPEN);
    	elevatorSecondStageSolenoid.set(OPEN);
    	pistonState = STOPPED;
    }
    
    // Method to extend the holders that will hold the totes up
    public void stackHold(){
    	holdersState = false;
    	elevatorStackHolderSolenoid.set(OPEN);
    }
    
    // Method to retract the holders that will hold the stack
    public void stackDrop(){
    	holdersState = true;
    	elevatorStackHolderSolenoid.set(CLOSE);
    }
    
    // Returns the state of elevator
    public int getPistonState(){
    	return pistonState;
    }
    
    // Method to call the magnet encoders to always update them
    public void updateMag(){
    	magFloor0 = elevatorMagBottom.get();
    	magFloor1 = elevatorMagLow.get();
    	magFloor2 = elevatorMagMed.get();
    	magFloor3 = elevatorMagHigh.get();
    }
    
    // Returns the elevator state in int 
    public int elevatorState(){
    	return currentState.ordinal();
    }
    
    public void move(elevState goToState){
    	System.out.println("The goToState: " + goToState.toString());
    	
    	if(goToState != currentState && !Robot.collectorWrists.getState()) Robot.collectorWrists.open(); // Moves the tote collector out of the way of elevator
    	
    	// These check which direction to go in
    	if(goToState == currentState) currentTrigger = trigState.NOTHING; // If the user is already there
    	else if(goToState.ordinal() > currentState.ordinal()) currentTrigger = trigState.UP;
    	else if(goToState.ordinal() < currentState.ordinal()) currentTrigger = trigState.DOWN;
    	
    	// Checks if the piston and if any return false updates the location of elevator
    	if(!magFloor0) currentTrigger = trigState.AT_0;
    	else if(!magFloor1) currentTrigger = trigState.AT_1;
    	else if(!magFloor2) currentTrigger = trigState.AT_2;
    	else if(!magFloor3) currentTrigger = trigState.AT_3;
    	
    	switch(currentTrigger) {
	    case NOTHING:
	    	System.out.println("Trigger State Nothing");
	    	pistonStop();
	    	break;
	    case UP:
	    	switch(currentState) {
	    	case FLOOR_0:
	    		System.out.println("Trigger is UP and case is FLOOR_0");
	    		pistonIn();
	    		currentState = elevState.BETWEEN_0_1; // Leaving floor 0
	    		break;
	    	case BETWEEN_0_1:
	    		System.out.println("Trigger is UP and case is BETWEEN_0_1");
	    		pistonIn();
	    		break;
	    	case FLOOR_1:
	    		System.out.println("Trigger is UP and case is FLOOR_1");
	    		pistonIn();
	    		currentState = elevState.BETWEEN_1_2; // leaving floor 1
	    		break;
	    	case BETWEEN_1_2:
	    		System.out.println("Trigger is UP and case is BETWEEN_1_2");
	    		pistonIn();
	    		break;
	    	case FLOOR_2:
	    		System.out.println("Trigger is UP and case is FLOOR_2");
	    		pistonIn();
	    		currentState = elevState.BETWEEN_2_3; // Leaving floor 2
	    		break;
	    	case BETWEEN_2_3:
	    		System.out.println("Trigger is UP and case is BETWEEN_2_3");
	    		pistonIn();
	    		break;
	    	case FLOOR_3:
	    		System.out.println("Trigger is UP and case is FLOOR_3");
	    		pistonStop(); // Stops because it means you are at the top of the elevator
	    		break;
	    	default:
	    	}
	    case DOWN:
	    	switch(currentState) {
	    	case FLOOR_3:
	    		System.out.println("Trigger is DOWN and case is FLOOR_3");
	    		pistonOut();
	    		currentState = elevState.BETWEEN_2_3; // Leaving floor 3
	    		break;
	    	case BETWEEN_2_3:
	    		System.out.println("Trigger is DOWN and case is BETWEEN_2_3");
	    		pistonOut();
	    		break;
	    	case FLOOR_2:
	    		System.out.println("Trigger is DOWN and case is FLOOR_2");
	    		pistonOut();
	    		currentState = elevState.BETWEEN_1_2; // Leaving floor 2
	    		break;
	    	case BETWEEN_1_2:
	    		System.out.println("Trigger is DOWN and case is BETWEEN_1_2");
	    		pistonOut();
	    		break;
	    	case FLOOR_1:
	    		System.out.println("Trigger is DOWN and case is FLOOR_1");
	    		pistonOut();
	    		currentState = elevState.BETWEEN_0_1; // Leaving floor 1
	    		break;
	    	case BETWEEN_0_1:
	    		System.out.println("Trigger is DOWN and case is BETWEEN_0_1");
	    		pistonOut();
	    		break;
	    	case FLOOR_0:
	    		System.out.println("Trigger is DOWN and case is FLOOR_0");
	    		pistonStop(); // Stops because this is the bottom
	    		break;
	    	default:
	    	}
	    case AT_0:
	    	System.out.println("Trigger is AT_0");
	    	currentState = elevState.FLOOR_0;
	    	if(goToState == elevState.FLOOR_0){
	    		pistonStop();
	    	}
	    	else if(goToState.ordinal() > currentState.ordinal()){
	    		currentState = elevState.BETWEEN_0_1;
	    		pistonIn();
	    	}
	    	else {
	    		pistonStop(); // at the bottom which means no where to go
	    	}
	    	break;
	    case AT_1:
	    	System.out.println("Trigger is AT_1");
	    	currentState = elevState.FLOOR_1;
	    	if(goToState == currentState){
	    		pistonStop();
	    	}
	    	else if(goToState.ordinal() > currentState.ordinal()){
	    		currentState = elevState.BETWEEN_1_2;
	    		pistonIn();
	    	}
	    	else { // This accounts that you must be going down
	    		currentState = elevState.BETWEEN_0_1;
	    		pistonOut();
	    	}
	    	break;
	    case AT_2:
	    	System.out.println("Trigger is AT_2");
	    	currentState = elevState.FLOOR_2;
	    	if(goToState == currentState){
	    		pistonStop();
	    	}
	    	else if(goToState.ordinal() > currentState.ordinal()){
	    		currentState = elevState.BETWEEN_2_3;
	    		pistonIn();
	    	}
	    	else { // This accounts that you must be going down
	    		currentState = elevState.BETWEEN_1_2;
	    		pistonOut();
	    	}
	    	break;
	    case AT_3:
	    	System.out.println("Trigger is AT_3");
	    	currentState = elevState.FLOOR_3;
	    	if(goToState == currentState){
	    		pistonStop();
	    	}
	    	else if(goToState.ordinal() > currentState.ordinal()){
	    		pistonStop(); // At the top so no greater position
	    	}
	    	else { // This accounts that you must be going down
	    		currentState = elevState.BETWEEN_2_3;
	    		pistonOut();
	    	}
	    	break;
	    default:
    	}
    	
    }
    
    // Method to print the state in a nice format on dashboard
    // Mainly for testing on the fly
    public void stateDashboard(){
    	String state = "";
    	if(getPistonState() == STOPPED) state = "Stopped.";
    	if(getPistonState() == PISTON_OUT) state = "Piston Extending...";
    	if(getPistonState() == PISTON_IN) state = "Piston Retracting...";
    	SmartDashboard.putString("State of elevator: ", state);
    }
    
    // Method to print the elevator position
    // Mainly for testing on the fly
    public void elevatorDashboard(){
    	SmartDashboard.putString("Elevator Current Trigger State: ", currentTrigger.toString());
    	SmartDashboard.putString("Elevator Current State: ", currentState.toString());
    }
    
    // Method for puting the information on the dashboard while testing
    public void testingInformation(){
    	SmartDashboard.putBoolean("bottom mag reading: ", elevatorMagBottom.get());
    	SmartDashboard.putBoolean("low mag reading: ", elevatorMagLow.get());
    	SmartDashboard.putBoolean("med mag reading: ", elevatorMagMed.get());
    	SmartDashboard.putBoolean("high mag reading: ", elevatorMagHigh.get());
    	elevatorDashboard();
    	stateDashboard();
    }
    
}

