// RobotBuilder Version: 1.5
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package org.usfirst.frc1073.robot15.subsystems;

import org.usfirst.frc1073.robot15.Robot;
import org.usfirst.frc1073.robot15.RobotMap;
import org.usfirst.frc1073.robot15.commands.*;

import edu.wpi.first.wpilibj.*;
import edu.wpi.first.wpilibj.command.Subsystem;
import edu.wpi.first.wpilibj.smartdashboard.SmartDashboard;


/**
 *
 */
public class Elevator extends Subsystem {
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    DigitalInput elevatorMagLow = RobotMap.elevatorelevatorMagLow;
    DigitalInput elevatorMagMed = RobotMap.elevatorelevatorMagMed;
    DigitalInput elevatorMagHigh = RobotMap.elevatorelevatorMagHigh;
    Solenoid elevatorFirstStageSolenoid = RobotMap.elevatorelevatorFirstStageSolenoid;
    Solenoid elevatorSecondStageSolenoid = RobotMap.elevatorelevatorSecondStageSolenoid;
    AnalogInput irSensor = RobotMap.elevatorirSensor;
    DigitalInput limitSwitch = RobotMap.elevatorlimitSwitch;
    Solenoid elevatorStackHolder = RobotMap.elevatorelevatorStackHolder;
    CANTalon elevatorRollerTalon = RobotMap.elevatorelevatorRollerTalon;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    
    // easy to call variables for pnuematics
    private final boolean OPEN = true; 
    private final boolean CLOSE = false;
    
    private int totesHeld = 0; // The number of totes in the robot
    
    private int state = 0; // State of the elevator
    /*********************
     * 
     * 0 = stopped
     * 1 = piston out
     * 2 = piston in
     * 
     *********************/
    private final int STOPPED = 0;
    private final int PISTON_OUT = 1;
    private final int PISTON_IN = 2;
    
    private int stopPoint = 0; //The point it is at
    /************************
     * 
     * 0 = all the way out
     * 1 = stop at scoring platform
     * 2 = put tote in stack in elevator
     * 3 = stack on top of another tote on field that is already placed
     * 
     ************************/
    private final int FULL_OUT = 0;
    private final int SCORE_PLATFORM = 1;
    private final int ELEVATOR_STACK = 2;
    private final int STACK_EXISTING = 3;
    
    private int goToPoint = 0;
    /************************
     * 
     * The point it is going to next and is basically a copy of stopPoint
     * 
     * 0 = all the way out
     * 1 = stop at scoring platform
     * 2 = put tote in stack in elevator
     * 3 = stack on top of another tote on field that is already placed
     * 
     ************************/

    // Put methods for controlling this subsystem
    // here. Call these from Commands.

    public void initDefaultCommand() {
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND
        setDefaultCommand(new ToteElevatorCounter());

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND
	
        // Set the default command for a subsystem here.
        //setDefaultCommand(new MySpecialCommand());
    }
    
    // Method to set the totes amount
    public void setTotesHeld(int totes) {
    	totesHeld = totes;
    }
    
    // Returns the amount of totes
    public int getTotesHeld() {
    	return totesHeld;
    }
    
    // Returns the IR Sensor value
    public int getIrVal(){
    	return irSensor.getValue();
    }
    
    // Returns the limit switch value
    public boolean isSwitchHit(){
    	return limitSwitch.get();
    }
    
    // Method to collect the rollers to role in a tote
    public void rollersCollect(){
    	elevatorRollerTalon.set(0.7);
    }
    
    // Method ejects the totes on rolers
    public void rollersPurge(){
    	elevatorRollerTalon.set(-0.7);
    }
    
    // Method to turn the rolers off
    public void rollersOff(){
    	elevatorRollerTalon.set(0.0);
    }
    
    // Method to pull the elevator pistons in
    private void pistonIn(){
    	// The sequence of solenoid transactions is significant. DO NOT reorder casually!!
    	elevatorFirstStageSolenoid.set(CLOSE);
    	elevatorSecondStageSolenoid.set(OPEN);
    	state = PISTON_IN;
    }
    
    // Method to push the piston out
    private void pistonOut(){
    	// The sequence of solenoid transactions is significant. DO NOT reorder casually!!
    	elevatorSecondStageSolenoid.set(CLOSE);
    	elevatorFirstStageSolenoid.set(OPEN);
    	state = PISTON_OUT;
    }
    
    // Method to stop the piston where it is
    private void pistonStop(){
    	// The sequence of solenoid transactions is significant. DO NOT reorder casually!!
    	elevatorFirstStageSolenoid.set(CLOSE);
    	elevatorSecondStageSolenoid.set(CLOSE);
    	state = STOPPED;
    }
    
    // Method to extend the holders that will hold the totes up
    public void stackHold(){
    	elevatorStackHolder.set(OPEN);
    }
    
    // Method to retract the holders that will hold the stack
    public void stackDrop(){
    	elevatorStackHolder.set(CLOSE);
    }
    
    // Returns the state of elevator
    public int getState(){
    	return state;
    }
    
    // Returns the stop point
    public int getStopPoint(){
    	return stopPoint;
    }
    
    // Method to print the state in a nice format on dashboard
    public void stateDashboard(){
    	String state = "";
    	if(getState() == STOPPED) state = "Stopped.";
    	if(getState() == PISTON_OUT) state = "Piston Extending...";
    	if(getState() == PISTON_IN) state = "Piston Retracting...";
    	SmartDashboard.putString("State of elevator: ", state);
    }
    
    // Method to print the elevator position
    public void elevatorDashboard(){
    	String position = "";
    	if(getStopPoint() == FULL_OUT) position = "In position to collect";
    	if(getStopPoint() == SCORE_PLATFORM) position = "In position to collect from score platform";
    	if(getStopPoint() == ELEVATOR_STACK) position = "In position to add to stack";
    	if(getStopPoint() == STACK_EXISTING) position = "In position to stack on an existing tote";
    	SmartDashboard.putString("Position: ", position);
    }
    
    /*********************************
     * 
     * Method to move the elevator to a given position from any point
     * 
     * @theHeight Elevator magnet switch is -ve polarity, i.e. false = "at magnet position"
     * 
     ********************************/
    public void move(int newGoTo){
    	goToPoint = newGoTo;
    	boolean theHeight;
    	if(goToPoint == stopPoint) pistonStop(); //Check to see if elevator is already there
    	else if(goToPoint > stopPoint){ // To move up
    		if(goToPoint == SCORE_PLATFORM) theHeight = elevatorMagLow.get();
        	if(goToPoint == ELEVATOR_STACK) theHeight = elevatorMagMed.get();
        	else theHeight = elevatorMagHigh.get();  // Assuming the only other value would be STACK_EXISTING
        	
        	if(!theHeight){ // Means the elevator is there
        		pistonStop();
        		stopPoint = goToPoint;
        	}
        	else{ // Continue moving
        		pistonIn();
        	}
    	}
    	else { // For going down
    		if(goToPoint == ELEVATOR_STACK){
    			theHeight = elevatorMagMed.get();
    			
            	if(!theHeight){ // Means the elevator is there
            		pistonStop();
            		stopPoint = goToPoint;
            	}
            	else{ // Continue moving
            		pistonOut();
            	}
    		}
    		if(goToPoint == SCORE_PLATFORM){
    			theHeight = elevatorMagLow.get();
    			
            	if(!theHeight){ // Means the elevator is there
            		pistonStop();
            		stopPoint = goToPoint;
            	}
            	else{ // Continue moving
            		pistonOut();
            	}
    		}
    		else{	// goToPoint must have been 0
    			pistonOut();	// No stop condition needed, stops when cylinder full
    			stopPoint = 0;
    		}
    	}
    	
    }
    
}

