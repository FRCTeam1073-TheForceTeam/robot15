// RobotBuilder Version: 1.5
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package org.usfirst.frc1073.robot15.subsystems;

import org.usfirst.frc1073.robot15.Robot;
import org.usfirst.frc1073.robot15.RobotMap;
import org.usfirst.frc1073.robot15.commands.*;

import edu.wpi.first.wpilibj.*;
import edu.wpi.first.wpilibj.DoubleSolenoid.Value;
import edu.wpi.first.wpilibj.command.Subsystem;


/**
 *
 */
public class Elevator extends Subsystem {
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    DigitalInput elevatorMagLow = RobotMap.elevatorelevatorMagLow;
    DigitalInput elevatorMagMed = RobotMap.elevatorelevatorMagMed;
    DigitalInput elevatorMagHight = RobotMap.elevatorelevatorMagHight;
    Solenoid elevatorFirstStageSolenoid = RobotMap.elevatorelevatorFirstStageSolenoid;
    Solenoid elevatorSecondStageSolenoid = RobotMap.elevatorelevatorSecondStageSolenoid;
    AnalogInput irSensor = RobotMap.elevatorirSensor;
    DigitalInput limitSwitch = RobotMap.elevatorlimitSwitch;
    CANTalon elevatorRollerTalon = RobotMap.elevatorelevatorRollerTalon;
    DoubleSolenoid elevatorClamperDoubleSolenoid = RobotMap.elevatorelevatorClamperDoubleSolenoid;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    
 // easy to call variables for pnuematics
    private final boolean OPEN = true; 
    private final boolean CLOSE = false;
    
    private int totesHeld = 0; // The number of totes in the robot
    private boolean MagPassed = true;
    
    private int state = 0; // State of the elevator
    /*********************
     * 
     * 0 = stopped
     * 1 = piston out
     * 3 = piston in
     * 
     *********************/
    
    private int stopPoint = 0;
    /************************
     * 
     * 0 = stop at scoring platform
     * 1 = put tote in stack in elevator
     * 2 = stack on top of another tote
     * 
     ************************/

    // Put methods for controlling this subsystem
    // here. Call these from Commands.

    public void initDefaultCommand() {
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND
        setDefaultCommand(new ToteElevatorCounter());

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND
	
        // Set the default command for a subsystem here.
        //setDefaultCommand(new MySpecialCommand());
    }
    
    // Method to set the totes amount
    public void setTotesHeld(int totes) {
    	totesHeld = totes;
    }
    
    // Returns the amount of totes
    public int getTotesHeld() {
    	return totesHeld;
    }
    
    // Returns the IR Sensor value
    public int getIrVal(){
    	return irSensor.getValue();
    }
    
    // Returns the limit switch value
    public boolean isSwitchHit(){
    	return limitSwitch.get();
    }
    
    // Method to collect the rollers to role in a tote
    public void rollersCollect(){
    	elevatorRollerTalon.set(0.7);
    }
    
    // Method ejects the totes on rolers
    public void rollersPurge(){
    	elevatorRollerTalon.set(-0.7);
    }
    
    // Method to turn the rolers off
    public void rollersOff(){
    	elevatorRollerTalon.set(0.0);
    }
    
    // Method to pull the elevator pistons in
    public void pistonIn(){
    	elevatorFirstStageSolenoid.set(OPEN);
    	elevatorFirstStageSolenoid.set(CLOSE);
    	elevatorSecondStageSolenoid.set(OPEN);
    	state = 2;
    }
    
    // Method to push the piston out
    public void pistonOut(){
    	elevatorSecondStageSolenoid.set(CLOSE);
    	elevatorFirstStageSolenoid.set(OPEN);
    	state = 1;
    }
    
    // Method to stop the piston where it is
    public void pistonStop(){
    	elevatorFirstStageSolenoid.set(CLOSE);
    	elevatorSecondStageSolenoid.set(CLOSE);
    	state = 0;
    }
    
    /*********************************************
     * 
     * Method to lift the tote with given Stop
     * 
     * @param howHigh tells which mag to stop at
     * 0 = stop at scoring platform
     * 1 = put tote in stack in elevator
     * 2 = stack on top of another tote
     * 
     *********************************************/
    public boolean liftTote(int howHigh){
    	boolean theHeight;
    	boolean done = false;
    	stopPoint = howHigh;
    	
    	if(howHigh == 0) theHeight = elevatorMagLow.get();    // This is for the scoring platform
    	if(howHigh == 1) theHeight = elevatorMagMed.get();    // This is for stacking the totes in the elevator
    	else theHeight = elevatorMagHight.get();  // This is to stack on a tote that is already on platform
    	
    	if(!theHeight) MagPassed = false;
    	if(!theHeight || !MagPassed){
    		pistonStop();
    		done = true;
    	}
    	else{
    		pistonIn();
    		done = false;
    	}
    	
    	return done;
    }
    
    // Method to stack totes in the robot
    public void stackTotes(){
    	
    }

    // Returns the state of elevator
    public int getState(){
    	return state;
    }
    
    // Method to set the state with a given state
    public void setState(int newState){
    	state = newState;
    }
    
    // Returns the stop point
    public int getStopPoint(){
    	return stopPoint;
    }
    
}

